{"version":3,"sources":["Game.ts","arrayUtils.ts","Visual.ts","CheckButton.tsx","FeedbackView.tsx","Row.tsx","Palette.tsx","InfoView.tsx","GameInfo.ts","Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["newGame","solution","i","push","Math","floor","random","guesses","generateFeedback","a","b","red","reduce","sum","_","index","white","count","min","overlap","valueCountize","nums","valueCounts","value","feedbackCompare","gameWon","game","length","feedback","gameLost","seqArray","begin","end","arr","colors","measure","percent","CheckButton","props","color","disabled","warning","className","style","borderColor","height","width","fontSize","marginLeft","FeedbackView","padding","FeedbackViewRow","map","backgroundColor","marginRight","marginTop","marginBottom","Row","rowClass","active","margin","combo","undefined","onClick","submit","some","val","Palette","activeValue","InfoView","info","gameInfo","headline","text","getInfo","activeCombo","winInfo","possibleCombosRemaining","lossInfo","warnRow","guess","warningRow","midGameInfo","combos","Array","fill","MAX_VAL","NUM_COLORS","produce","allPossibleCombos","filter","possCombo","every","Board","useState","setGame","newBlankCombo","setActiveCombo","setActiveValue","setGameInfo","useEffect","gameOver","handleGuess","submitGuess","ac","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb48d2f2.chunk.js","sourcesContent":["export const COMBO_SIZE = 4;\nexport const MAX_GUESSES = 10;\nexport const NUM_COLORS = 6;\nexport const UNSELECTED = -1;\n\nexport type Combo = number[];\n\nexport interface Feedback {\n  red: number;\n  white: number;\n}\n\nexport type Guess = {\n  combo: Combo;\n  feedback: Feedback;\n};\n\nexport interface Game {\n  solution: Combo;\n  guesses: Guess[];\n}\n\nexport function newGame(): Game {\n  const solution: Combo = [];\n  for (let i = 0; i < COMBO_SIZE; ++i) {\n    solution.push(Math.floor(Math.random() * NUM_COLORS));\n  }\n  return {\n    solution,\n    guesses: []\n  };\n}\n\nexport function submitGuess(game: Game, combo: Combo) {\n  const guess = { combo, feedback: generateFeedback(combo, game.solution) };\n  return { ...game, guesses: [...game.guesses, guess] };\n}\n\nexport function generateFeedback(a: Combo, b: Combo): Feedback {\n  const red = a.reduce(\n    (sum, _, index) => (a[index] == b[index] ? sum + 1 : sum),\n    0\n  );\n  const total = overlap(valueCountize(a), valueCountize(b));\n  return {\n    red,\n    white: total - red\n  };\n}\n\nfunction valueCountize(nums: number[]): number[] {\n  return nums.reduce((valueCounts: number[], value) => {\n    valueCounts[value] = (valueCounts[value] || 0) + 1;\n    return valueCounts;\n  }, []);\n}\n\nfunction overlap(a: number[], b: number[]): number {\n  return a.reduce(\n    (count: number, _, index) => count + (Math.min(a[index], b[index]) || 0),\n    0\n  );\n}\n\nexport function feedbackCompare(a: Feedback, b: Feedback) {\n  return 10 * (a.red - b.red) + (a.white - b.white);\n}\n\nexport function gameWon(game: Game): boolean {\n  return (\n    game.guesses.length > 0 &&\n    game.guesses[game.guesses.length - 1].feedback.red == COMBO_SIZE\n  );\n}\n\nexport function gameLost(game: Game): boolean {\n  return game.guesses.length == MAX_GUESSES && !gameWon(game);\n}\n","export function seqArray(begin: number, end: number) {\n  const arr: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    arr.push(i);\n  }\n  return arr;\n}\n","// const colors = {\n//   white: \"#ffffff\",\n//   red: \"#c42348\",\n//   green: \"#33ca7f\",\n//   orange: \"#ea7317\",\n//   blue: \"#3da5d9\",\n//   yellow: \"#fec601\"\n// };\n\nimport { MAX_GUESSES } from \"./Game\";\n\nexport const colors = [\n  \"#ffffff\",\n  \"#c42348\",\n  \"#33ca7f\",\n  \"#ea7317\",\n  \"#3da5d9\",\n  \"#fec601\"\n];\n\nexport function measure(percent: number) {\n  const ROW_HEIGHT = 100 / MAX_GUESSES;\n  return `${ROW_HEIGHT * (percent / 100)}vh`;\n}\n","import React from \"react\";\nimport { colors, measure } from \"./Visual\";\n\ninterface IProps {\n  onClick: () => void;\n  disabled: boolean;\n  warning?: boolean;\n}\n\nexport default function CheckButton(props: IProps) {\n  const color = props.disabled ? \"#bbb\" : props.warning ? colors[5] : colors[2];\n  return (\n    <button\n      className=\"check-button\"\n      {...props}\n      style={{\n        color,\n        borderColor: color,\n        height: measure(80),\n        width: measure(80),\n        fontSize: measure(45),\n        marginLeft: measure(10)\n      }}\n    >\n      ✔\n    </button>\n  );\n}\n","import React from \"react\";\nimport { seqArray } from \"./arrayUtils\";\nimport { colors, measure } from \"./Visual\";\nimport { Feedback } from \"./Game\";\n\ninterface IProps {\n  feedback: Feedback;\n}\n\nexport default function FeedbackView(props: IProps) {\n  return (\n    <div className=\"feedback-view\" style={{ padding: `${measure(5)} 0` }}>\n      <FeedbackViewRow count={props.feedback.red} color={colors[1]} />\n      <FeedbackViewRow count={props.feedback.white} color={colors[0]} />\n    </div>\n  );\n}\n\nfunction FeedbackViewRow(props: { count: number; color: string }) {\n  return (\n    <div className=\"feedback-row\" style={{ height: measure(35) }}>\n      {seqArray(0, props.count).map(() => (\n        <span\n          className=\"feedback-peg\"\n          style={{\n            backgroundColor: props.color,\n            height: measure(25),\n            width: measure(25),\n            marginRight: measure(10),\n            marginTop: measure(5),\n            marginBottom: measure(5)\n          }}\n        ></span>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { seqArray } from \"./arrayUtils\";\nimport CheckButton from \"./CheckButton\";\nimport { colors, measure } from \"./Visual\";\nimport FeedbackView from \"./FeedbackView\";\nimport { Combo, COMBO_SIZE, Feedback, Guess, UNSELECTED } from \"./Game\";\n\ninterface IProps {\n  combo: Combo | null;\n  feedback: Feedback | null;\n  onClick: (index: number) => void;\n  active?: boolean;\n  warning?: boolean;\n  submit: () => void;\n  index: number;\n}\n\nexport default function Row(props: IProps) {\n  let rowClass = \"row\";\n  if (props.active) rowClass += \" active\";\n\n  return (\n    <div\n      className={rowClass}\n      style={{ height: measure(100), padding: measure(10) }}\n    >\n      <span\n        className=\"row-label\"\n        style={{ width: measure(60), marginTop: measure(20) }}\n      >\n        {props.active ? \">>\" : `${props.index + 1}]`}\n      </span>\n      {seqArray(0, COMBO_SIZE).map(index => (\n        <span\n          className=\"dot\"\n          style={{\n            height: measure(80),\n            width: measure(80),\n            margin: `0 ${measure(10)}`,\n            backgroundColor: props.combo\n              ? colors[props.combo[index]]\n              : undefined\n          }}\n          onClick={() => props.onClick(index)}\n        ></span>\n      ))}\n      <div\n        className=\"feedback-area\"\n        style={{ width: measure(35 * COMBO_SIZE + 15) }}\n      >\n        {props.active && (\n          <CheckButton\n            onClick={() => props.submit()}\n            disabled={!!props.combo?.some(val => val == UNSELECTED)}\n            warning={props.warning}\n          />\n        )}\n        {props.feedback && <FeedbackView feedback={props.feedback} />}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { seqArray } from \"./arrayUtils\";\nimport { colors, measure } from \"./Visual\";\nimport { NUM_COLORS } from \"./Game\";\n\ninterface IProps {\n  onClick: (index: number) => void;\n  activeValue: number;\n}\n\nexport default function Palette(props: IProps) {\n  return (\n    <div className=\"palette\">\n      {seqArray(0, NUM_COLORS).map(index => (\n        <span\n          className=\"palette-item\"\n          style={{\n            backgroundColor: colors[index],\n            height: measure(80),\n            width: props.activeValue == index ? measure(90) : measure(80)\n          }}\n          onClick={() => props.onClick(index)}\n        ></span>\n      ))}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Combo, Game } from \"./Game\";\nimport getInfo, { GameInfo } from \"./GameInfo\";\n\ninterface IProps {\n  gameInfo: GameInfo;\n}\n\nexport default function InfoView(props: IProps) {\n  const info = props.gameInfo;\n\n  return (\n    <div className=\"info\">\n      {info.headline && <h1>{info.headline}</h1>}\n      <p>{info.text}</p>\n      {info.warning && <p className=\"warning\">{info.warning}</p>}\n    </div>\n  );\n}\n","import produce from \"immer\";\nimport {\n  Combo,\n  COMBO_SIZE,\n  feedbackCompare,\n  Game,\n  gameLost,\n  gameWon,\n  generateFeedback,\n  Guess,\n  MAX_GUESSES,\n  NUM_COLORS,\n  UNSELECTED\n} from \"./Game\";\n\nexport interface GameInfo {\n  headline?: string;\n  text: string;\n  warning?: string;\n}\n\nexport default function getInfo(game: Game, activeCombo: Combo): GameInfo {\n  if (gameWon(game)) return winInfo(game);\n\n  if (gameLost(game)) return lossInfo(game);\n\n  return midGameInfo(game, activeCombo);\n}\n\nfunction winInfo(game: Game): GameInfo {\n  return {\n    headline: \"Win!\",\n    text: `${game.guesses.length} guesses.`\n  };\n}\n\nfunction lossInfo(game: Game): GameInfo {\n  return {\n    headline: \"Loss :(\",\n    text: `${possibleCombosRemaining(game).length} possible combos remain.`\n  };\n}\n\nfunction midGameInfo(game: Game, activeCombo: Combo): GameInfo {\n  const warnRow = warningRow(activeCombo, game.guesses);\n  return {\n    text: `${possibleCombosRemaining(game).length} possible combos remain.`,\n    warning:\n      warnRow == null\n        ? undefined\n        : `Current guess cannot be the solution. See Row ${warnRow + 1}.`\n  };\n}\n\nfunction warningRow(activeCombo: Combo, guesses: Guess[]): number | null {\n  if (activeCombo.some(val => val == UNSELECTED)) return null;\n\n  for (let i = 0; i < guesses.length; ++i) {\n    const guess = guesses[i];\n    if (\n      feedbackCompare(\n        generateFeedback(activeCombo, guess.combo),\n        guess.feedback\n      ) !== 0\n    )\n      return i;\n  }\n  return null;\n}\n\nexport function possibleCombosRemaining(game: Game): Combo[] {\n  const combos = allPossibleCombos();\n  const possCombos = combos.filter(possCombo =>\n    game.guesses.every(\n      guess =>\n        feedbackCompare(\n          generateFeedback(possCombo, guess.combo),\n          guess.feedback\n        ) == 0\n    )\n  );\n  return possCombos;\n}\n\nexport function allPossibleCombos(): Combo[] {\n  const combos: Combo[] = [];\n  let combo: Combo = new Array(COMBO_SIZE).fill(0);\n  combos.push(combo);\n  const MAX_VAL = NUM_COLORS - 1;\n  while (combo.some(val => val < MAX_VAL)) {\n    let i = 0;\n    while (true) {\n      if (combo[i] == MAX_VAL) {\n        combo = produce(combo, combo => {\n          combo[i] = 0;\n        });\n        ++i;\n      } else {\n        combo = produce(combo, combo => {\n          combo[i] += 1;\n        });\n        break;\n      }\n    }\n    combos.push(combo);\n  }\n  return combos;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { seqArray } from \"./arrayUtils\";\nimport {\n  COMBO_SIZE,\n  Game,\n  gameLost,\n  gameWon,\n  MAX_GUESSES,\n  newGame,\n  submitGuess,\n  UNSELECTED\n} from \"./Game\";\nimport Row from \"./Row\";\nimport produce from \"immer\";\nimport Palette from \"./Palette\";\nimport InfoView from \"./InfoView\";\nimport { measure } from \"./Visual\";\nimport getInfo, { GameInfo } from \"./GameInfo\";\n\ninterface IProps {}\n\nexport default function Board(props: IProps) {\n  const [game, setGame] = useState(newGame());\n  const [activeCombo, setActiveCombo] = useState(newBlankCombo());\n  const [activeValue, setActiveValue] = useState(1);\n\n  const [gameInfo, setGameInfo] = useState<GameInfo>({ text: \"\" });\n  useEffect(() => {\n    setGameInfo(getInfo(game, activeCombo));\n  }, [game, activeCombo]);\n\n  const gameOver = gameWon(game) || gameLost(game);\n\n  const reset = () => {\n    setGame(newGame());\n    setActiveCombo(newBlankCombo());\n  };\n\n  const handleGuess = () => {\n    setGame(submitGuess(game, activeCombo));\n    setActiveCombo(newBlankCombo());\n  };\n\n  return (\n    <div className=\"board\" style={{ fontSize: measure(40) }}>\n      <div className=\"rows\">\n        {game.guesses.map((guess, index) => (\n          <Row\n            key={index}\n            {...guess}\n            index={index}\n            onClick={() => {}}\n            submit={() => {}}\n          />\n        ))}\n        {!gameOver && (\n          <Row\n            index={game.guesses.length}\n            combo={activeCombo}\n            feedback={null}\n            active\n            warning={!!gameInfo.warning}\n            onClick={index =>\n              setActiveCombo(\n                produce(activeCombo, ac => {\n                  ac[index] = activeValue;\n                })\n              )\n            }\n            submit={() => handleGuess()}\n          />\n        )}\n      </div>\n      <div className=\"sidebar\" style={{ width: measure(400) }}>\n        <Palette\n          onClick={index => setActiveValue(index)}\n          activeValue={activeValue}\n        />\n        <InfoView gameInfo={gameInfo} />\n        {gameOver && (\n          <button\n            className=\"replay\"\n            style={{ height: measure(80) }}\n            onClick={() => reset()}\n          >\n            Play again\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction newBlankCombo() {\n  return new Array(COMBO_SIZE).fill(UNSELECTED);\n}\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Board from \"./Board\";\nimport { newGame } from \"./Game\";\n\nexport default function App() {\n  return <Board />;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}